shader(type = fragment);

resource(id = 3) const texture tex_sampler[3];
input(id = 0) vec3 position;
input(id = 1) vec2 texcoord;
input(id = 2) vec3 normal;
input(id = 3) vec3 tangent;
input(id = 4) vec3 bitangent;
input(id = 5, flat) uint object_id;
input(id = 6) mat3 tbn_matrix;
input(id = 9) mat4 mv_matrix;
input(id = 13) mat4 view_matrix;

output(id = 0) vec4 output_colour;

const float specular_strength = 0.2f;
const float parallax_multiplier = 0.02f;
const float parallax_offset = -0.01f;

import <math>

struct Light
{
	vec3 pos_worldspace;
	vec3 colour;
	float wattage;
};

struct ToneMappingInfo
{
	float gamma;
	float map_constant;
	vec4 light_powers;
};

resource(id = 2) const buffer ToneMappingBuffer
{
	ToneMappingInfo info;
} tone_mapping;

const uint light_count = 4;
Light lights[] = Light[light_count]
(
	Light(vec3(-4200.0, 600.0, 1700.0), vec3(1.0, 0.0, 0.0), 1.0),
	Light(vec3(-4200.0, 600.0, -1700.0), vec3(0.0, 1.0, 0.0), 1.0),
	Light(vec3(-1600.0, 600.0, -1700.0), vec3(0.0, 0.0, 1.0), 1.0),
	Light(vec3(-1600.0, 600.0, 1700.0), vec3(1.0, 0.0, 1.0), 1.0)
);

vec3 get_light_direction_tangentspace()
{
	// We need the position in cameraspace.
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;

	const vec3 light_direction_worldspace = vec3(1.0, 1.0, 1.0);
	vec3 light_direction_cameraspace = (view_matrix * vec4(light_direction_worldspace, 0.0)).xyz;
	return normalize(tbn_matrix * light_direction_cameraspace);
}

vec3 get_distance_from_fragment()
{
	// We need the position in cameraspace.
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;

	const vec3 camera_pos_cameraspace = vec3(0.0);
	vec3 light_direction_cameraspace_unnormalised = camera_pos_cameraspace - position_cameraspace;
	return light_direction_cameraspace_unnormalised;
}

vec2 texcoord_offset(vec2 texcoord, uint parallax_texture_id)
{
	float height = texture(tex_sampler[parallax_texture_id], texcoord).r;
	vec3 view_dir = -normalize(tbn_matrix * get_distance_from_fragment());
	vec2 p = view_dir.xy / view_dir.z * (height * parallax_multiplier) + parallax_offset;
	return texcoord - p;
}

vec3 get_mapped_normal(vec2 texcoord, uint normal_texture_id)
{
	return texture(tex_sampler[normal_texture_id], texcoord).xyz * 255.0/128.0 - 1;
}

vec4 ambient(vec4 texture_colour)
{
	return texture_colour * vec4(0.1, 0.1, 0.1, 1.0);
}

vec4 diffuse(vec4 texture_colour, vec3 normal_tangentspace, vec3 light_direction_tangentspace, vec4 light_colour, float light_wattage, float distance)
{
	float cos_theta = max(dot(normal_tangentspace, light_direction_tangentspace), 0.0);
	return texture_colour * light_colour * light_wattage * cos_theta / (pow(distance, 2));
}

vec4 specular(vec4 texture_colour, vec3 normal_tangentspace, vec3 light_direction_tangentspace, vec4 light_colour, float light_wattage, float distance)
{
	vec3 reflect_dir = normalize(reflect(-light_direction_tangentspace, normal_tangentspace));
	vec3 view_dir = normalize(tbn_matrix * normalize(get_distance_from_fragment()));
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);
	return texture_colour * light_colour * light_wattage * spec * specular_strength / pow(distance, 2);
}

vec4 diffuse_pointlight(vec4 texture_colour, vec3 normal_tangentspace, Light light)
{
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;
	vec3 position_worldspace = (inverse(view_matrix) * vec4(position_cameraspace, 1.0)).xyz;

	vec3 light_to_fragment_worldspace = light.pos_worldspace - position_worldspace;
	vec3 light_to_fragment_cameraspace = (view_matrix * vec4(light_to_fragment_worldspace, 0.0)).xyz;
	vec3 light_to_fragment_tangentspace = normalize(tbn_matrix * light_to_fragment_cameraspace);

	float distance = length(position_worldspace - light.pos_worldspace);

	return diffuse(texture_colour, normal_tangentspace, light_to_fragment_tangentspace, vec4(light.colour, 1.0), light.wattage, distance);
}

vec4 specular_pointlight(vec4 texture_colour, vec3 normal_tangentspace, Light light)
{
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;
	vec3 position_worldspace = (inverse(view_matrix) * vec4(position_cameraspace, 1.0)).xyz;

	vec3 light_to_fragment_worldspace = light.pos_worldspace - position_worldspace;
	vec3 light_to_fragment_cameraspace = (view_matrix * vec4(light_to_fragment_worldspace, 0.0)).xyz;
	vec3 light_to_fragment_tangentspace = normalize(tbn_matrix * light_to_fragment_cameraspace);

	float distance = length(position_worldspace - light.pos_worldspace);

	return specular(texture_colour, normal_tangentspace, light_to_fragment_tangentspace, vec4(light.colour, 1.0), light.wattage, distance);
}

vec3 do_tone_mapping(vec3 hdr_colour)
{
	float gamma = tone_mapping.info.gamma;
	// Constant tweakable?
	vec3 mapped_colour = hdr_colour / (hdr_colour + vec3(tone_mapping.info.map_constant));
	return tz::math::pow(mapped_colour, vec3(1.0f / gamma));
}

void main()
{
	vec2 parallax_texcoord = texcoord_offset(texcoord, object_id + 6);
	vec3 mapped_normal_tangentspace = get_mapped_normal(parallax_texcoord, object_id + 3);
	vec4 texture_colour = texture(tex_sampler[object_id], parallax_texcoord);

	// get the old normal in tangentspace.
	vec3 old_normal_tangentspace = normalize(tbn_matrix * (mv_matrix * vec4(normal, 0.0)).xyz);
	output_colour = ambient(texture_colour) + diffuse(texture_colour, mapped_normal_tangentspace, get_light_direction_tangentspace(), vec4(1.0, 1.0, 1.0, 1.0), 1.0, 1.0) + specular(texture_colour, mapped_normal_tangentspace, get_light_direction_tangentspace(), vec4(1.0, 1.0, 1.0, 1.0), 1.0, 1.0);
	for(uint i = 0; i < light_count; i++)
	{
		lights[i].wattage *= 300000 * tone_mapping.info.light_powers[i];
		output_colour += diffuse_pointlight(texture_colour, mapped_normal_tangentspace, lights[i]) + specular_pointlight(texture_colour, mapped_normal_tangentspace, lights[i]);
	}
	output_colour = vec4(do_tone_mapping(output_colour.rgb), 1.0f);
}
